#include <cstdlib>
#include <iostream>
using namespace std;
int strlen(const char * s) 
{	int i = 0;
	for(; s[i]; ++i);
	return i;
}
void strcpy(char * d,const char * s)
{
	int i = 0;
	for( i = 0; s[i]; ++i)
		d[i] = s[i];
	d[i] = 0;
		
}
int strcmp(const char * s1,const char * s2)
{
	for(int i = 0; s1[i] && s2[i] ; ++i) {
		if( s1[i] < s2[i] )
			return -1;
		else if( s1[i] > s2[i])
			return 1;
	}
	return 0;
}
void strcat(char * d,const char * s)
{
	int len = strlen(d);
	strcpy(d+len,s);
}
class MyString
{
private:
    char *str;
    int length;
    
    void init(const char *s) {
        if(s) {
            length = strlen(s);
            str = new char[length + 1];
            strcpy(str, s);
        } else {
            length = 0;
            str = new char[1];
            str[0] = '\0';
        }
    }
    
public:
    // 构造函数
    MyString() {
        length = 0;
        str = new char[1];
        str[0] = '\0';
    }
    
    MyString(const char *s) {
        init(s);
    }
    
    // 拷贝构造函数
    MyString(const MyString &s) {
        init(s.str);
    }
    
    // 析构函数
    ~MyString() {
        delete[] str;
    }
    
    // 赋值运算符重载
    MyString& operator=(const MyString &s) {
        if(this != &s) {
            delete[] str;
            init(s.str);
        }
        return *this;
    }
    
    MyString& operator=(const char *s) {
        delete[] str;
        init(s);
        return *this;
    }
    
    // 加法运算符重载
    MyString operator+(const MyString &s) const {
        char *temp = new char[length + s.length + 1];
        strcpy(temp, str);
        strcat(temp, s.str);
        MyString result(temp);
        delete[] temp;
        return result;
    }
    
    MyString operator+(const char *s) const {
        char *temp = new char[length + strlen(s) + 1];
        strcpy(temp, str);
        strcat(temp, s);
        MyString result(temp);
        delete[] temp;
        return result;
    }
    
    // 友元函数，实现字符串在前面的加法
    friend MyString operator+(const char *s, const MyString &ms) {
        char *temp = new char[strlen(s) + ms.length + 1];
        strcpy(temp, s);
        strcat(temp, ms.str);
        MyString result(temp);
        delete[] temp;
        return result;
    }
    
    // += 运算符重载
    MyString& operator+=(const char *s) {
        int newLength = length + strlen(s);
        char *temp = new char[newLength + 1];
        strcpy(temp, str);
        strcat(temp, s);
        delete[] str;
        str = temp;
        length = newLength;
        return *this;
    }
    
    MyString& operator+=(const MyString &s) {
        int newLength = length + s.length;
        char *temp = new char[newLength + 1];
        strcpy(temp, str);
        strcat(temp, s.str);
        delete[] str;
        str = temp;
        length = newLength;
        return *this;
    }
    
    // 比较运算符重载
    bool operator<(const MyString &s) const {
        return strcmp(str, s.str) < 0;
    }
    
    bool operator==(const MyString &s) const {
        return strcmp(str, s.str) == 0;
    }
    
    bool operator>(const MyString &s) const {
        return strcmp(str, s.str) > 0;
    }
    
    // 下标运算符重载
    char& operator[](int index) {
        return str[index];
    }
    
    // 函数调用运算符重载，用于获取子串
    MyString operator()(int start, int len) const {
        char *temp = new char[len + 1];
        for(int i = 0; i < len; i++) {
            temp[i] = str[start + i];
        }
        temp[len] = '\0';
        MyString result(temp);
        delete[] temp;
        return result;
    }
    
    // 输出运算符重载
    friend ostream& operator<<(ostream &os, const MyString &s) {
        os << s.str;
        return os;
    }
};


int CompareString( const void * e1, const void * e2)
{
	MyString * s1 = (MyString * ) e1;
	MyString * s2 = (MyString * ) e2;
	if( * s1 < *s2 )
	return -1;
	else if( *s1 == *s2)
	return 0;
	else if( *s1 > *s2 )
	return 1;
}
int main()
{
	MyString s1("abcd-"),s2,s3("efgh-"),s4(s1);
	MyString SArray[4] = {"big","me","about","take"};
	cout << "1. " << s1 << s2 << s3<< s4<< endl;
	s4 = s3;
	s3 = s1 + s3;
	cout << "2. " << s1 << endl;
	cout << "3. " << s2 << endl;
	cout << "4. " << s3 << endl;
	cout << "5. " << s4 << endl;
	cout << "6. " << s1[2] << endl;
	s2 = s1;
	s1 = "ijkl-";
	s1[2] = 'A' ;
	cout << "7. " << s2 << endl;
	cout << "8. " << s1 << endl;
	s1 += "mnop";
	cout << "9. " << s1 << endl;
	s4 = "qrst-" + s2;
	cout << "10. " << s4 << endl;
	s1 = s2 + s4 + " uvw " + "xyz";
	cout << "11. " << s1 << endl;
	qsort(SArray,4,sizeof(MyString),CompareString);
	for( int i = 0;i < 4;i ++ )
	cout << SArray[i] << endl;
	//s1的从下标0开始长度为4的子串
	cout << s1(0,4) << endl;
	//s1的从下标5开始长度为10的子串
	cout << s1(5,10) << endl;
	return 0;
}
